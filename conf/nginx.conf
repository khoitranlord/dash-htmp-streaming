worker_processes  auto;
#error_log  logs/error.log;

events {
  worker_connections  1024;
}

# Handle incomming RTMPS streams 
stream {

  upstream backend {
    server 127.0.0.1:1935;
  }

  server {
    listen 1936 ssl;
    proxy_pass backend;
    ssl_certificate /assets/ssl/.self_signed/rtmp.crt;
    ssl_certificate_key /assets/ssl/.self_signed/rtmp.key;

    # Allow incomming only from specified IP's
    allow 127.0.0.1; # Localhost
    allow 192.168.0.0/16; # Private class C addresses
    allow 172.16.0.0/12; # Private class B addresses
    allow 10.0.0.0/8; # Private class A addresses
    deny all; # Deny any IP not listed above
  }
}

# RTMP configuration
rtmp {
  server {
    listen 1935; # Listen on standard RTMP port
    chunk_size 4000; 
    # ping 30s;
    # notify_method get;

    # This application is to accept incoming stream
    application live {
      live on; # Allows live input
      drop_idle_publisher 10s; # Drop Publishing connections that havnt sent any stream data for over 10 seconds
      
      # Local push for built in players
      push rtmp://localhost:1935/show;
      
      # YouTube
      #push rtmp://a.rtmp.youtube.com/live2/<stream_key>;

      # YouTube (RTMPS)
      #push rtmp://localhost:1941/live2/<stream_key>;
      
      # Facebook Live (Via Local Stunnel Server)
      #push rtmp://localhost:1940/rtmp/<stream_key>;

      # Allow publish only from specified IP's
      allow publish 127.0.0.1; # Localhost
      allow publish 192.168.0.0/16; # Private class C addresses
      allow publish 172.16.0.0/12; # Private class B addresses
      allow publish 10.0.0.0/8; # Private class A addresses
      deny publish all; # Deny any IP not listed above
    }

    # This is the HLS application
    application show {
      live on; # Allows live input from above application
      deny play all; # disable consuming the stream from nginx as rtmp

      hls on; # Enable HTTP Live Streaming
      hls_fragment 3;
      hls_playlist_length 20;
      hls_path /mnt/hls/;  # hls fragments path
            
      # MPEG-DASH
      dash on;
      dash_path /mnt/dash/;  # dash fragments path
      dash_fragment 3;
      dash_playlist_length 20;      
    }
  }
}

# HTTP configuration
http {
  sendfile off;
  tcp_nopush on;
  directio 512;
  # aio on;
  
  # HTTP server required to serve the player and HLS fragments
  server {
    listen 8080;
    
    # Redirect requests for http://<server_ip>:8080/ to http://<server_ip>:8080/players
    location = / {
      absolute_redirect off; # This is required to handle reverse proxy's like NginxProxyManager, otherwise the redirect will include this servers port in the redirect.
      return 302 /players/;
    }

    # Serve HLS fragments
    location /hls {
      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }
      
      root /mnt;

      add_header Cache-Control no-cache; # Disable cache
      
      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';
            
      # allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
    }
    
    # Serve DASH fragments
    location /dash {
      types {
        application/dash+xml mpd;
        video/mp4 mp4;
      }
      
      root /mnt;
  
      add_header Cache-Control no-cache; # Disable cache

      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';

      # Allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
    }    
    
    # This URL provides RTMP statistics in XML
    location /stat {
      rtmp_stat all;
      rtmp_stat_stylesheet stat.xsl; # Use stat.xsl stylesheet 
    }

    location /stat.xsl {
      # XML stylesheet to view RTMP stats.
      root /usr/local/nginx/html;
    }
  }
}
